/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.jena.riot.avro;

import io.grpc.netty.shaded.io.netty.util.internal.SuppressJava6Requirement;
import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ATriple extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5619448180346782368L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ATriple\",\"namespace\":\"org.apache.jena.riot.avro\",\"fields\":[{\"name\":\"subject\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TermIRI\",\"fields\":[{\"name\":\"iri\",\"type\":{\"type\":\"enum\",\"name\":\"Kind\",\"symbols\":[\"IRI\",\"PN\"]}},{\"name\":\"value\",\"type\":\"string\"}]}},{\"type\":\"record\",\"name\":\"TermBlankNode\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"}]}]},{\"name\":\"predicate\",\"type\":\"TermIRI\"},{\"name\":\"object\",\"type\":[{\"type\":\"array\",\"items\":\"TermIRI\"},\"TermBlankNode\",{\"type\":\"record\",\"name\":\"TermLiteral\",\"fields\":[{\"name\":\"lex\",\"type\":\"string\"},{\"name\":\"lang\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"datatype\",\"type\":[\"null\",\"TermIRI\"],\"default\":null}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ATriple> ENCODER =
      new BinaryMessageEncoder<ATriple>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ATriple> DECODER =
      new BinaryMessageDecoder<ATriple>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ATriple> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ATriple> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ATriple> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ATriple>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ATriple to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ATriple from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ATriple instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ATriple fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Object subject;
   private org.apache.jena.riot.avro.TermIRI predicate;
   private java.lang.Object object;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ATriple() {}

  /**
   * All-args constructor.
   * @param subject The new value for subject
   * @param predicate The new value for predicate
   * @param object The new value for object
   */
  public ATriple(java.lang.Object subject, org.apache.jena.riot.avro.TermIRI predicate, java.lang.Object object) {
    this.subject = subject;
    this.predicate = predicate;
    this.object = object;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return subject;
    case 1: return predicate;
    case 2: return object;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: subject = value$; break;
    case 1: predicate = (org.apache.jena.riot.avro.TermIRI)value$; break;
    case 2: object = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public java.lang.Object getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.Object value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'predicate' field.
   * @return The value of the 'predicate' field.
   */
  public org.apache.jena.riot.avro.TermIRI getPredicate() {
    return predicate;
  }


  /**
   * Sets the value of the 'predicate' field.
   * @param value the value to set.
   */
  public void setPredicate(org.apache.jena.riot.avro.TermIRI value) {
    this.predicate = value;
  }

  /**
   * Gets the value of the 'object' field.
   * @return The value of the 'object' field.
   */
  public java.lang.Object getObject() {
    return object;
  }


  /**
   * Sets the value of the 'object' field.
   * @param value the value to set.
   */
  public void setObject(java.lang.Object value) {
    this.object = value;
  }

  /**
   * Creates a new ATriple RecordBuilder.
   * @return A new ATriple RecordBuilder
   */
  public static org.apache.jena.riot.avro.ATriple.Builder newBuilder() {
    return new org.apache.jena.riot.avro.ATriple.Builder();
  }

  /**
   * Creates a new ATriple RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ATriple RecordBuilder
   */
  public static org.apache.jena.riot.avro.ATriple.Builder newBuilder(org.apache.jena.riot.avro.ATriple.Builder other) {
    if (other == null) {
      return new org.apache.jena.riot.avro.ATriple.Builder();
    } else {
      return new org.apache.jena.riot.avro.ATriple.Builder(other);
    }
  }

  /**
   * Creates a new ATriple RecordBuilder by copying an existing ATriple instance.
   * @param other The existing instance to copy.
   * @return A new ATriple RecordBuilder
   */
  public static org.apache.jena.riot.avro.ATriple.Builder newBuilder(org.apache.jena.riot.avro.ATriple other) {
    if (other == null) {
      return new org.apache.jena.riot.avro.ATriple.Builder();
    } else {
      return new org.apache.jena.riot.avro.ATriple.Builder(other);
    }
  }

  /**
   * RecordBuilder for ATriple instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ATriple>
    implements org.apache.avro.data.RecordBuilder<ATriple> {

    private java.lang.Object subject;
    private org.apache.jena.riot.avro.TermIRI predicate;
    private org.apache.jena.riot.avro.TermIRI.Builder predicateBuilder;
    private java.lang.Object object;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.jena.riot.avro.ATriple.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.subject)) {
        this.subject = data().deepCopy(fields()[0].schema(), other.subject);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.predicate)) {
        this.predicate = data().deepCopy(fields()[1].schema(), other.predicate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPredicateBuilder()) {
        this.predicateBuilder = org.apache.jena.riot.avro.TermIRI.newBuilder(other.getPredicateBuilder());
      }
      if (isValidValue(fields()[2], other.object)) {
        this.object = data().deepCopy(fields()[2].schema(), other.object);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ATriple instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.jena.riot.avro.ATriple other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.subject)) {
        this.subject = data().deepCopy(fields()[0].schema(), other.subject);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.predicate)) {
        this.predicate = data().deepCopy(fields()[1].schema(), other.predicate);
        fieldSetFlags()[1] = true;
      }
      this.predicateBuilder = null;
      if (isValidValue(fields()[2], other.object)) {
        this.object = data().deepCopy(fields()[2].schema(), other.object);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public java.lang.Object getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.ATriple.Builder setSubject(java.lang.Object value) {
      validate(fields()[0], value);
      this.subject = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.ATriple.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'predicate' field.
      * @return The value.
      */
    public org.apache.jena.riot.avro.TermIRI getPredicate() {
      return predicate;
    }


    /**
      * Sets the value of the 'predicate' field.
      * @param value The value of 'predicate'.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.ATriple.Builder setPredicate(org.apache.jena.riot.avro.TermIRI value) {
      validate(fields()[1], value);
      this.predicateBuilder = null;
      this.predicate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'predicate' field has been set.
      * @return True if the 'predicate' field has been set, false otherwise.
      */
    public boolean hasPredicate() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'predicate' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.jena.riot.avro.TermIRI.Builder getPredicateBuilder() {
      if (predicateBuilder == null) {
        if (hasPredicate()) {
          setPredicateBuilder(org.apache.jena.riot.avro.TermIRI.newBuilder(predicate));
        } else {
          setPredicateBuilder(org.apache.jena.riot.avro.TermIRI.newBuilder());
        }
      }
      return predicateBuilder;
    }

    /**
     * Sets the Builder instance for the 'predicate' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.jena.riot.avro.ATriple.Builder setPredicateBuilder(org.apache.jena.riot.avro.TermIRI.Builder value) {
      clearPredicate();
      predicateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'predicate' field has an active Builder instance
     * @return True if the 'predicate' field has an active Builder instance
     */
    public boolean hasPredicateBuilder() {
      return predicateBuilder != null;
    }

    /**
      * Clears the value of the 'predicate' field.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.ATriple.Builder clearPredicate() {
      predicate = null;
      predicateBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'object' field.
      * @return The value.
      */
    public java.lang.Object getObject() {
      return object;
    }


    /**
      * Sets the value of the 'object' field.
      * @param value The value of 'object'.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.ATriple.Builder setObject(java.lang.Object value) {
      validate(fields()[2], value);
      this.object = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'object' field has been set.
      * @return True if the 'object' field has been set, false otherwise.
      */
    public boolean hasObject() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'object' field.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.ATriple.Builder clearObject() {
      object = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ATriple build() {
      try {
        ATriple record = new ATriple();
        record.subject = fieldSetFlags()[0] ? this.subject :  defaultValue(fields()[0]);
        if (predicateBuilder != null) {
          try {
            record.predicate = this.predicateBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("predicate"));
            throw e;
          }
        } else {
          record.predicate = fieldSetFlags()[1] ? this.predicate : (org.apache.jena.riot.avro.TermIRI) defaultValue(fields()[1]);
        }
        record.object = fieldSetFlags()[2] ? this.object :  defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ATriple>
    WRITER$ = (org.apache.avro.io.DatumWriter<ATriple>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ATriple>
    READER$ = (org.apache.avro.io.DatumReader<ATriple>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










