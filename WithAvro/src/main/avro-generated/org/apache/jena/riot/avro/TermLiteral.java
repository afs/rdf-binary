/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.jena.riot.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TermLiteral extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4994257040260286031L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TermLiteral\",\"namespace\":\"org.apache.jena.riot.avro\",\"fields\":[{\"name\":\"lex\",\"type\":\"string\"},{\"name\":\"lang\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"datatype\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TermIRI\",\"fields\":[{\"name\":\"iri\",\"type\":{\"type\":\"enum\",\"name\":\"Kind\",\"symbols\":[\"IRI\",\"PN\"]}},{\"name\":\"value\",\"type\":\"string\"}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TermLiteral> ENCODER =
      new BinaryMessageEncoder<TermLiteral>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TermLiteral> DECODER =
      new BinaryMessageDecoder<TermLiteral>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TermLiteral> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TermLiteral> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TermLiteral> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TermLiteral>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TermLiteral to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TermLiteral from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TermLiteral instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TermLiteral fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence lex;
   private java.lang.CharSequence lang;
   private org.apache.jena.riot.avro.TermIRI datatype;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TermLiteral() {}

  /**
   * All-args constructor.
   * @param lex The new value for lex
   * @param lang The new value for lang
   * @param datatype The new value for datatype
   */
  public TermLiteral(java.lang.CharSequence lex, java.lang.CharSequence lang, org.apache.jena.riot.avro.TermIRI datatype) {
    this.lex = lex;
    this.lang = lang;
    this.datatype = datatype;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lex;
    case 1: return lang;
    case 2: return datatype;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lex = (java.lang.CharSequence)value$; break;
    case 1: lang = (java.lang.CharSequence)value$; break;
    case 2: datatype = (org.apache.jena.riot.avro.TermIRI)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'lex' field.
   * @return The value of the 'lex' field.
   */
  public java.lang.CharSequence getLex() {
    return lex;
  }


  /**
   * Sets the value of the 'lex' field.
   * @param value the value to set.
   */
  public void setLex(java.lang.CharSequence value) {
    this.lex = value;
  }

  /**
   * Gets the value of the 'lang' field.
   * @return The value of the 'lang' field.
   */
  public java.lang.CharSequence getLang() {
    return lang;
  }


  /**
   * Sets the value of the 'lang' field.
   * @param value the value to set.
   */
  public void setLang(java.lang.CharSequence value) {
    this.lang = value;
  }

  /**
   * Gets the value of the 'datatype' field.
   * @return The value of the 'datatype' field.
   */
  public org.apache.jena.riot.avro.TermIRI getDatatype() {
    return datatype;
  }


  /**
   * Sets the value of the 'datatype' field.
   * @param value the value to set.
   */
  public void setDatatype(org.apache.jena.riot.avro.TermIRI value) {
    this.datatype = value;
  }

  /**
   * Creates a new TermLiteral RecordBuilder.
   * @return A new TermLiteral RecordBuilder
   */
  public static org.apache.jena.riot.avro.TermLiteral.Builder newBuilder() {
    return new org.apache.jena.riot.avro.TermLiteral.Builder();
  }

  /**
   * Creates a new TermLiteral RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TermLiteral RecordBuilder
   */
  public static org.apache.jena.riot.avro.TermLiteral.Builder newBuilder(org.apache.jena.riot.avro.TermLiteral.Builder other) {
    if (other == null) {
      return new org.apache.jena.riot.avro.TermLiteral.Builder();
    } else {
      return new org.apache.jena.riot.avro.TermLiteral.Builder(other);
    }
  }

  /**
   * Creates a new TermLiteral RecordBuilder by copying an existing TermLiteral instance.
   * @param other The existing instance to copy.
   * @return A new TermLiteral RecordBuilder
   */
  public static org.apache.jena.riot.avro.TermLiteral.Builder newBuilder(org.apache.jena.riot.avro.TermLiteral other) {
    if (other == null) {
      return new org.apache.jena.riot.avro.TermLiteral.Builder();
    } else {
      return new org.apache.jena.riot.avro.TermLiteral.Builder(other);
    }
  }

  /**
   * RecordBuilder for TermLiteral instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TermLiteral>
    implements org.apache.avro.data.RecordBuilder<TermLiteral> {

    private java.lang.CharSequence lex;
    private java.lang.CharSequence lang;
    private org.apache.jena.riot.avro.TermIRI datatype;
    private org.apache.jena.riot.avro.TermIRI.Builder datatypeBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.jena.riot.avro.TermLiteral.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lex)) {
        this.lex = data().deepCopy(fields()[0].schema(), other.lex);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lang)) {
        this.lang = data().deepCopy(fields()[1].schema(), other.lang);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.datatype)) {
        this.datatype = data().deepCopy(fields()[2].schema(), other.datatype);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDatatypeBuilder()) {
        this.datatypeBuilder = org.apache.jena.riot.avro.TermIRI.newBuilder(other.getDatatypeBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TermLiteral instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.jena.riot.avro.TermLiteral other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.lex)) {
        this.lex = data().deepCopy(fields()[0].schema(), other.lex);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lang)) {
        this.lang = data().deepCopy(fields()[1].schema(), other.lang);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.datatype)) {
        this.datatype = data().deepCopy(fields()[2].schema(), other.datatype);
        fieldSetFlags()[2] = true;
      }
      this.datatypeBuilder = null;
    }

    /**
      * Gets the value of the 'lex' field.
      * @return The value.
      */
    public java.lang.CharSequence getLex() {
      return lex;
    }


    /**
      * Sets the value of the 'lex' field.
      * @param value The value of 'lex'.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.TermLiteral.Builder setLex(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.lex = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lex' field has been set.
      * @return True if the 'lex' field has been set, false otherwise.
      */
    public boolean hasLex() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lex' field.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.TermLiteral.Builder clearLex() {
      lex = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lang' field.
      * @return The value.
      */
    public java.lang.CharSequence getLang() {
      return lang;
    }


    /**
      * Sets the value of the 'lang' field.
      * @param value The value of 'lang'.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.TermLiteral.Builder setLang(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lang = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lang' field has been set.
      * @return True if the 'lang' field has been set, false otherwise.
      */
    public boolean hasLang() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lang' field.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.TermLiteral.Builder clearLang() {
      lang = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'datatype' field.
      * @return The value.
      */
    public org.apache.jena.riot.avro.TermIRI getDatatype() {
      return datatype;
    }


    /**
      * Sets the value of the 'datatype' field.
      * @param value The value of 'datatype'.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.TermLiteral.Builder setDatatype(org.apache.jena.riot.avro.TermIRI value) {
      validate(fields()[2], value);
      this.datatypeBuilder = null;
      this.datatype = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'datatype' field has been set.
      * @return True if the 'datatype' field has been set, false otherwise.
      */
    public boolean hasDatatype() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'datatype' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.jena.riot.avro.TermIRI.Builder getDatatypeBuilder() {
      if (datatypeBuilder == null) {
        if (hasDatatype()) {
          setDatatypeBuilder(org.apache.jena.riot.avro.TermIRI.newBuilder(datatype));
        } else {
          setDatatypeBuilder(org.apache.jena.riot.avro.TermIRI.newBuilder());
        }
      }
      return datatypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'datatype' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.apache.jena.riot.avro.TermLiteral.Builder setDatatypeBuilder(org.apache.jena.riot.avro.TermIRI.Builder value) {
      clearDatatype();
      datatypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'datatype' field has an active Builder instance
     * @return True if the 'datatype' field has an active Builder instance
     */
    public boolean hasDatatypeBuilder() {
      return datatypeBuilder != null;
    }

    /**
      * Clears the value of the 'datatype' field.
      * @return This builder.
      */
    public org.apache.jena.riot.avro.TermLiteral.Builder clearDatatype() {
      datatype = null;
      datatypeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TermLiteral build() {
      try {
        TermLiteral record = new TermLiteral();
        record.lex = fieldSetFlags()[0] ? this.lex : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lang = fieldSetFlags()[1] ? this.lang : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (datatypeBuilder != null) {
          try {
            record.datatype = this.datatypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("datatype"));
            throw e;
          }
        } else {
          record.datatype = fieldSetFlags()[2] ? this.datatype : (org.apache.jena.riot.avro.TermIRI) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TermLiteral>
    WRITER$ = (org.apache.avro.io.DatumWriter<TermLiteral>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TermLiteral>
    READER$ = (org.apache.avro.io.DatumReader<TermLiteral>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.lex);

    if (this.lang == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lang);
    }

    if (this.datatype == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.datatype.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.lex = in.readString(this.lex instanceof Utf8 ? (Utf8)this.lex : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.lang = null;
      } else {
        this.lang = in.readString(this.lang instanceof Utf8 ? (Utf8)this.lang : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.datatype = null;
      } else {
        if (this.datatype == null) {
          this.datatype = new org.apache.jena.riot.avro.TermIRI();
        }
        this.datatype.customDecode(in);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.lex = in.readString(this.lex instanceof Utf8 ? (Utf8)this.lex : null);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lang = null;
          } else {
            this.lang = in.readString(this.lang instanceof Utf8 ? (Utf8)this.lang : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.datatype = null;
          } else {
            if (this.datatype == null) {
              this.datatype = new org.apache.jena.riot.avro.TermIRI();
            }
            this.datatype.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










